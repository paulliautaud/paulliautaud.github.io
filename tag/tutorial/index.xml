<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial | Paul Liautaud</title><link>https://paulliautaud.github.io/tag/tutorial/</link><atom:link href="https://paulliautaud.github.io/tag/tutorial/index.xml" rel="self" type="application/rss+xml"/><description>Tutorial</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><image><url>https://paulliautaud.github.io/media/icon_hu5a8bb89b166067dad42de6c6e5349de5_15995_512x512_fill_lanczos_center_3.png</url><title>Tutorial</title><link>https://paulliautaud.github.io/tag/tutorial/</link></image><item><title>Chapter 0 - Preliminaries</title><link>https://paulliautaud.github.io/teaching/python/00_preliminaries/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://paulliautaud.github.io/teaching/python/00_preliminaries/</guid><description>&lt;p>This section will first present what Python is. Then, it will show and demistify the main steps to set Python and Anaconda environment on any laptop.&lt;/p>
&lt;h2 id="first-why-python-">First, why Python ?&lt;/h2>
&lt;p>Python is a general-purpose interpreted programming language which has the particularity of being very readable and pragmatic.
It has a very large base of external modules, especially scientific ones, which makes it particularly attractive for programming mathematical problems.
The fact that Python is an interpreted language makes it slower than compiled languages, but on the other hand it ensures a great speed of development which allows the human to work a little less while the computer will have to work a little more.
This particularity has made Python one of the main programming languages used by scientists.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The prerequisite would be to know the basics of the Python language, for example as taught in the last year&amp;rsquo;s course.&lt;/p>
&lt;p>People who are not familiar with the basics of the Python language should take the MOOC (Massive Open Online Course) &lt;em>&lt;a href="https://www.fun-mooc.fr/fr/cours/python-3-des-fondamentaux-aux-concepts-avances-du-langage/" target="_blank" rel="noopener">Python 3 : des fondamentaux aux concepts avancés du langage&lt;/a>&lt;/em> available on the website of &lt;a href="https://www.fun-mooc.fr/" target="_blank" rel="noopener">France Université Numérique&lt;/a>.
In case access is restricted, the videos of the MOOC are available on &lt;a href="https://www.youtube.com/channel/UCIlUBOXnXjxdjmL_atU53kA/" target="_blank" rel="noopener">YouTube&lt;/a>.&lt;/p>
&lt;p>In addition, the realization of the exercises requires access to a computer or an online service with Python 3.6 (or more recent) completed by the following modules: &lt;code>numpy&lt;/code>, &lt;code>scipy&lt;/code>, &lt;code>sympy&lt;/code>, &lt;code>matplotlib&lt;/code>, &lt;code>numba&lt;/code>, &lt;code>networkx&lt;/code> and &lt;code>pandas&lt;/code>. The use of a code editor allowing writing in Python is also highly recommended. It is suggested here to use &lt;a href="https://jupyterlab.readthedocs.io/" target="_blank" rel="noopener">Jupyter Lab&lt;/a>, which allows both writing interactive notebooks and scripts and also adding one&amp;rsquo;s own solutions below the statements, which is very convenient. It is not necessary to use Jupyter Lab, other environments are also suitable, such as &lt;a href="https://www.spyder-ide.org/" target="_blank" rel="noopener">Spyder&lt;/a> or &lt;a href="https://jupyter-notebook.readthedocs.io/" target="_blank" rel="noopener">Jupyter Notebook&lt;/a>.&lt;/p>
&lt;p>The following sections describe how to install and run the Python environment or use it online without installation.&lt;/p>
&lt;h2 id="documentation">Documentation&lt;/h2>
&lt;p>It is generally not useful (nor desirable) to know all the functions and subtleties of the Python language for occasional use. On the other hand, it is essential to know how to use the documentation effectively. The official documentation is available at &lt;a href="https://docs.python.org/" target="_blank" rel="noopener">https://docs.python.org/&lt;/a>. The language and version can be selected on the top left. It is highly recommended to look at how the documentation is written and learn how to use it.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Those unable or unwilling to install Python can go directly to the &lt;a href="#sec:intro-lancement">1.5 Launching Jupyter Lab&lt;/a> section for alternatives available online without installation.&lt;/p>
&lt;p>There are essentially four ways to install Python and the modules required to run the exercises:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Anaconda&lt;/strong> is a complete Python distribution, i.e. it directly installs a very large quantity of modules (much more than we actually need). The advantage of this installation is that it is very simple; the disadvantage is that it takes up a lot of disk space. This is the preferred method if you are running Windows or MacOS and do not have disk space problems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Miniconda&lt;/strong> is a light version of Anaconda, which installs only the base by default. The advantage is that it takes up little disk space, but it requires an additional action to install the modules needed. This is the preferred method if you are on Windows or MacOS and have little disk space available.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Linux repositories:&lt;/strong> Most Linux distributions allow you to install Python and the basic modules directly from the package repositories that come with them. This is the preferred method under Linux.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Pip&lt;/strong> is a package manager for Python. This is the preferred method to add a module if Python is already installed by your operating system, and this module is not included in the packages of your distribution. This method allows a more fine and advanced management of installed modules than what is proposed with the previous methods.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="installation-with-anaconda">Installation with Anaconda&lt;/h3>
&lt;p>The easiest way to install Python 3 and all necessary dependencies on Windows and MacOS is to install &lt;a href="https://anaconda.org/" target="_blank" rel="noopener">Anaconda&lt;/a>. The disadvantage of Anaconda is that it takes a lot of disk space to install because so many modules are installed by default. Detailed installation procedures according to each operating system are described at: &lt;a href="https://docs.anaconda.com/anaconda/install/" target="_blank" rel="noopener">https://docs.anaconda.com/anaconda/install/&lt;/a>. In summary the installation procedure is as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Download Anaconda for Python 3 at: &lt;a href="https://www.anaconda.com/products/individual#Downloads" target="_blank" rel="noopener">https://www.anaconda.com/products/individual#Downloads&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Double-click on the downloaded file to start the installation of Anaconda, then follow the installation procedure (it is not necessary to install VS Code).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the installation is complete, launch Anaconda Navigator from the start menu or from the list of applications.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="installation-with-miniconda">Installation with Miniconda&lt;/h3>
&lt;p>The &lt;a href="https://docs.conda.io/miniconda.html" target="_blank" rel="noopener">Miniconda&lt;/a> distribution has the advantage over Anaconda of taking up little disk space, at the cost of having to install the necessary modules manually. The quick installation procedure is as follows:&lt;/p>
&lt;ol>
&lt;li>Download Miniconda for Python 3 at: &lt;a href="https://docs.conda.io/miniconda.html" target="_blank" rel="noopener">https://docs.conda.io/miniconda.html&lt;/a>.&lt;/li>
&lt;li>Double-click on the downloaded file to start the Miniconda installation, then follow the installation procedure.&lt;/li>
&lt;li>Once the installation is complete, launch Anaconda Prompt from the Start menu or from the list of applications.&lt;/li>
&lt;li>In the terminal, type the command:
&lt;code>conda install anaconda-navigator numpy scipy sympy matplotlib numba networkx pandas jupyterlab&lt;/code>
and confirm the installation of the dependencies.&lt;/li>
&lt;/ol>
&lt;h3 id="installation-from-repositories">Installation from repositories&lt;/h3>
&lt;p>Most Linux distributions allow to easily install Python and the most standard modules directly from the repositories they include. The following procedure is for Ubuntu, but can be easily adapted to other distributions.&lt;/p>
&lt;ol>
&lt;li>Install Python 3:
sudo apt install python3 python-pip3&lt;/li>
&lt;li>Install the &lt;code>numpy&lt;/code>, &lt;code>scipy&lt;/code>, &lt;code>sympy&lt;/code>, &lt;code>matplotlib&lt;/code>, &lt;code>numba&lt;/code>, &lt;code>networkx&lt;/code> and &lt;code>pandas&lt;/code> modules:
sudo apt install python3-numpy python3-scipy python3-sympy python3-matplotlib python3-numba python3-networkx python3-pandas&lt;/li>
&lt;li>Jupyter Lab is not available in Ubuntu packages, so it must be installed with Pip:
pip3 install jupyterlab&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note:&lt;/strong>
Depending on the operating system, you may have to replace the &lt;code>pip3&lt;/code> command with &lt;code>pip&lt;/code>. If you encounter permissions problem when running these commands, you should probably add &lt;code>--user&lt;/code> to the end of the previous command.&lt;/p>
&lt;h3 id="advanced-installation-with-pip">Advanced Installation with Pip&lt;/h3>
&lt;p>The following procedure describes the manual installation of modules with the &lt;a href="https://pip.pypa.io/en/stable/" target="_blank" rel="noopener">Pip&lt;/a> manager.&lt;/p>
&lt;ol>
&lt;li>Install Python from the address: &lt;a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/&lt;/a>.&lt;/li>
&lt;li>Install Pip from the address: &lt;a href="https://pip.pypa.io/en/stable/installation/" target="_blank" rel="noopener">https://pip.pypa.io/en/stable/installation/&lt;/a>&lt;/li>
&lt;li>Install the required modules by typing the following command line in a terminal:
pip3 install numpy scipy sympy matplotlib numba networkx pandas jupyterlab
&lt;strong>Note:&lt;/strong>
Depending on the operating system, you may have to replace the &lt;code>pip3&lt;/code> command with &lt;code>pip&lt;/code>. If you encounter permissions problem when running these commands, you should probably add &lt;code>--user&lt;/code> to the end of the previous command.&lt;/li>
&lt;/ol>
&lt;h2 id="lauching-jupyter-lab">Lauching Jupyter Lab&lt;/h2>
&lt;div id="sec:intro-lancement">&lt;/div>
&lt;h3 id="with-anaconda-navigator">With Anaconda Navigator&lt;/h3>
&lt;p>If Anaconda or Miniconda has been installed, simply launch Anaconda Navigator and click on the &amp;ldquo;jupyterlab&amp;rdquo; icon:&lt;/p>
&lt;center>&lt;img src="https://paulliautaud.github.io/fig/anaconda.png" style="width:90%;max-width:900px;">&lt;/center>
&lt;h3 id="in-the-command-line">In the command line&lt;/h3>
&lt;p>To run Jupyter Lab from the command line, type &lt;code>jupyter lab&lt;/code> in a terminal. To quit, you have to click on &amp;ldquo;Shutdown&amp;rdquo; in the &amp;ldquo;File&amp;rdquo; menu of the Jupyter Lab window. It is also possible to type &lt;code>Ctrl+C&lt;/code> followed by &lt;code>y&lt;/code> (in English) or &lt;code>o&lt;/code> (in French) in the terminal where the &lt;code>jupyter lab&lt;/code> command was executed.&lt;/p>
&lt;h3 id="online-without-installation">Online without installation&lt;/h3>
&lt;p>For people who cannot or do not want to install Python and the necessary dependencies on their own computer, it is possible to use Jupyter Lab online with GESIS by clicking &lt;a href="https://mybinder.org/v2/gh/paulliautaud/python_stan/HEAD" target="_blank" rel="noopener">here&lt;/a>.
No account is required but documents stored without a user account are automatically deleted so it is imperative to save them on your own computer before leaving. It is also possible to create a user account on GESIS at &lt;a href="https://notebooks.gesis.org/hub/" target="_blank" rel="noopener">https://notebooks.gesis.org/hub/&lt;/a>, which then allows you to save your documents.&lt;/p>
&lt;p>Otherwise, different services offer the possibility to use Jupyter Lab for free after creating an account:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://cocalc.com/" target="_blank" rel="noopener">CoCalc&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://colab.research.google.com/" target="_blank" rel="noopener">Google Colaboratory&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="using-jupyter-lab">Using Jupyter Lab&lt;/h2>
&lt;p>Once Jupyter Lab is launched, the following window should appear in a browser:&lt;/p>
&lt;center>&lt;img src="https://paulliautaud.github.io/fig/jupyter_lab.png" style="width:90%;max-width:900px;">&lt;/center>
&lt;p>Jupyter Lab essentially allows for three types of documents: &lt;strong>notebooks&lt;/strong>, &lt;strong>scripts&lt;/strong> and &lt;strong>terminals&lt;/strong>. A notebook consists of cells that can contain either code or text in Markdown format. The cells can be evaluated interactively on demand, which allows great flexibility. A Python script is simply a text file containing Python instructions. It runs from start to finish and it is not possible to interact with it interactively during its execution (unless it has been explicitly programmed). To execute a python script it is necessary to open a terminal.&lt;/p>
&lt;p>A notebook is composed of cells, which can be of two main types: code cells and text cells, as shown in the following figure.
Text cells can contain LaTeX formulas.&lt;/p>
&lt;center>&lt;img src="https://paulliautaud.github.io/fig/jupyter_lab_2.png" style="width:90%;max-width:900px;">&lt;/center>
&lt;p>Detailed documentation for Jupyter Lab is available &lt;a href="https://jupyterlab.readthedocs.io/" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Basic commands:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create a new file: click on the &lt;code>PLUS&lt;/code> button at the top left, then choose the type of file to create.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rename a file: click with the second mouse button on the title of the notebook (either in the tab or in the file list).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Change the cell type: drop-down menu to choose between &amp;ldquo;Code&amp;rdquo; and &amp;ldquo;Markdown&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Execute a cell: combination of &lt;code>SHIFT+ENTER&lt;/code> keys.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run a script: type &lt;code>python scriptname.py&lt;/code> in a terminal to run the script &lt;code>scriptname.py&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rearrange cells: click and drop.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Juxtaposing tabs: click and drop.&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>